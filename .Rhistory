library(roxygen2)
roxygen2::roxygenise()
?reformulate
?tibble
roxygen2::roxygenise()
library(REPAC)
knitr::opts_chunk$set(echo = TRUE)
## Define the number of parallel cores
future::plan(multisession, workers = 8)
system.time(
se <- create_pa_rse(organism = "mouse", project="SRP048707", annotation="data/QAPA_up_mm10.bed", bed_cols= c("seqnames", "start", "end", "ids", "score", "strand", "SYMBOL", "annotation", "isTE", "trash"))
)
se <- create_pa_rse(organism = "mouse", project="SRP048707", annotation="~/Dropbox (MechPred)/Projects/APA/data/QAPA_up_mm10.bed", bed_cols= c("seqnames", "start", "end", "ids", "score", "strand", "SYMBOL", "annotation", "isTE", "trash"))
organism = "mouse"
project="SRP048707"
annotation="~/Dropbox (MechPred)/Projects/APA/data/QAPA_up_mm10.bed"
bed_cols= c("seqnames", "start", "end", "ids", "score", "strand", "SYMBOL", "annotation", "isTE", "trash")
sample_id=NULL
human_samples <- recount3::available_samples(organism = organism)
metadata <- purrr::map_dfr(project, function(id){
samples <- human_samples[human_samples$project == id,]$external_id
home <- human_samples[human_samples$project == id, "project_home"][1]
metadata <- recount3::locate_url(id,
project_home = home,
organism = organism,
type="metadata",
sample = sample)
metadata <- recount3::file_retrieve(metadata)
metadata <- recount3::read_metadata(metadata)
metadata$BigWigURL <- recount3::locate_url(id, project_home = home, type="bw", sample = metadata$external_id, organism = organism)
return(metadata)
})
metadata
samples <- human_samples[human_samples$project == id,]$external_id
samples <- human_samples[human_samples$project == project,]$external_id
samples
home <- human_samples[human_samples$project == project, "project_home"][1]
home
metadata <- purrr::map_dfr(project, function(id){
samples <- human_samples[human_samples$project == id,]$external_id
home <- human_samples[human_samples$project == id, "project_home"][1]
metadata <- recount3::locate_url(id,
project_home = home,
organism = organism,
type="metadata",
sample = sample)
metadata <- recount3::file_retrieve(metadata)
metadata <- recount3::read_metadata(metadata)
metadata$BigWigURL <- recount3::locate_url(id, project_home = home, type="bw", sample = metadata$external_id, organism = organism)
return(metadata)
})
keep <- purrr::map_lgl(metadata, ~ all(!is.na(.x)))
metadata <- metadata[,keep]
length(sample_id) == 0
if (length(sample_id) == 0) {
urls <- metadata$BigWigURL
} else {
metadata <- metadata[metadata$external_id %in% sample_id,]
urls <- metadata$BigWigURL
}
apa_gr <- GenomicRanges::makeGRangesFromDataFrame(readr::read_tsv(annotation, col_names = bed_cols), keep.extra.columns = T)
apa_gr
names(apa_gr) <- paste0(seqnames(apa_gr), ":", start(apa_gr), "-", end(apa_gr))
ord <- apa_gr
strand(ord) <- "*"
apa_gr <- apa_gr[names(sort(ord))]
apa_gr
mat <- furrr::future_map_dfc(seq_along(urls), function(x) {
y <- megadepth::get_coverage(urls[[x]], op = "sum",
annotation = annotation,
prefix=file.path(tempdir(), basename(urls[[x]]))
)
y <- sort(y)
y$score
},.progress = T)
urls
y <- megadepth::get_coverage(urls[[1]], op = "sum",
annotation = annotation,
prefix=file.path(tempdir(), basename(urls[[x]]))
)
y <- megadepth::get_coverage(urls[[1]], op = "sum",
annotation = annotation,
prefix=file.path(tempdir(), basename(urls[[1]]))
)
megadepth::install_megadepth()
megadepth::install_megadepth(force = TRUE)
y <- megadepth::get_coverage(urls[[1]], op = "sum",
annotation = annotation,
prefix=file.path(tempdir(), basename(urls[[1]]))
)
urls[[1]]
y <- megadepth::get_coverage(urls[[1]], op = "sum",
annotation = annotation)
?get_coverage
tempdir()
se$ids
#' @author Eddie Imada
#'
#' @examples
#' ## Explore available projects in recount3
#' human_projects <- recount3::available_projects()
#'
#' ## Find the project you are interested in and obtain PA expression
#' create_pa_rse(organism = "mouse", project="SRP048707", annotation="mysites.bed")
#'
#' @export
create_pa_rse <- function(organism=c("human", "mouse"), project=NULL, annotation=NULL, sample_id=NULL, bed_cols= c("chr", "start", "end", "ID", "score", "strand"), prefix = tempdir()) {
print("Retrieving metadata...")
human_samples <- recount3::available_samples(organism = organism)
metadata <- purrr::map_dfr(project, function(id){
samples <- human_samples[human_samples$project == id,]$external_id
home <- human_samples[human_samples$project == id, "project_home"][1]
metadata <- recount3::locate_url(id,
project_home = home,
organism = organism,
type="metadata",
sample = sample)
metadata <- recount3::file_retrieve(metadata)
metadata <- recount3::read_metadata(metadata)
metadata$BigWigURL <- recount3::locate_url(id, project_home = home, type="bw", sample = metadata$external_id, organism = organism)
return(metadata)
})
keep <- purrr::map_lgl(metadata, ~ all(!is.na(.x)))
metadata <- metadata[,keep]
if (length(sample_id) == 0) {
urls <- metadata$BigWigURL
} else {
metadata <- metadata[metadata$external_id %in% sample_id,]
urls <- metadata$BigWigURL
}
print("Loading PA sites...")
apa_gr <- GenomicRanges::makeGRangesFromDataFrame(readr::read_tsv(annotation, col_names = bed_cols, show_col_types = F), keep.extra.columns = T)
names(apa_gr) <- paste0(seqnames(apa_gr), ":", start(apa_gr), "-", end(apa_gr))
ord <- apa_gr
strand(ord) <- "*"
apa_gr <- apa_gr[names(sort(ord))]
print("Retrieving counts...")
mat <- furrr::future_map_dfc(seq_along(urls), function(x) {
y <- megadepth::get_coverage(urls[[x]], op = "sum",
annotation = annotation,
prefix=file.path(prefix, basename(urls[[x]]))
)
y <- sort(y)
y$score
},.progress = T)
mat <- as.matrix(mat)
mat <- round(sweep(mat, 2,
STATS=metadata$recount_qc.star.average_mapped_length,
FUN = "/"))
se <- SummarizedExperiment::SummarizedExperiment(assays=list(counts=mat),
colData = DataFrame(metadata),
rowRanges = apa_gr
)
# rownames(se) <- se$ids
# se <- se[sort(rownames(se))]
}
?DataFrame
fit_repac <- function(se, gene_name, group, covariates=NULL, method="BH"){
# Order PAS on "+" strand
se <- sort(se)
idx <- c(names(se[strand(se) == "+"]), rev(names(se[strand(se) == "-"])))
se <- se[idx,]
n <- table(gene_name) > 1
keep <- names(n[n == TRUE])
se <- se[gene_name %in% keep,]
rownames(se) <- unlist(tapply(gene_name, gene_name,
function(x){paste(x, sprintf("%02d", 1:length(x)), sep="_")}))
genes <- unique(gene_name)
results <- furrr::future_map_dfr(genes, function(id){
# Get gene count + pa sites
mat <- SummarizedExperiment::assays(se)[[1]][which(gene_name == id),]
mat <- t(mat+1)
### Select reference pa site
ref <- 1
cd <- SummarizedExperiment::colData(se)
res <- purrr::map_dfr(seq_along(colnames(mat)[-1]), function(idx){
nm <- colnames(mat)[idx+1]
ref.nms <- colnames(mat)[ref]
#weight <- gene.weight[colnames(mat)[ref],]
counts <- cbind(mat[,ref],mat[,idx+1])
comp <- compositions::acomp(counts)
icomp <- compositions::ilr(comp)[,1]
if (length(covariates) != 0) {
fmla <- reformulate(c(covariates, group), response = "icomp")
fit <- lm(fmla, data=model.frame(fmla, cd))
} else {
fmla <- reformulate(group, response = "icomp")
fit <- lm(fmla, data=model.frame(fmla, cd))
}
mod <- car::Anova(fit)
p.val <- mod[[group,"Pr(>F)"]]
if (p.val > 0.1) {
ref <<- idx+1
}
ci <- grep(group, names(fit$coefficients))
du <- compositions::ilrInv(fit$coefficients[1] + fit$coefficients[ci])[2] - ilrInv(fit$coefficients[1])[2]
cFC <- fit$coefficients[ci]
Ts <- round(summary(fit)$coefficients[[ci, "t value"]], 3)
tibble::tibble(gene_name=id, Ref=ref.nms, ID=nm, cFC=cFC, mDiff=du, "t"=Ts, p.val=p.val)
})
res$adj.p.val <- p.adjust(res$p.val, method = method)
res
},.progress = TRUE)
return(results)
}
se <- sort(se)
idx <- c(names(se[strand(se) == "+"]), rev(names(se[strand(se) == "-"])))
se <- se[idx,]
rownames(se) <- unlist(tapply(rowData(se)$gene_name, rowData(se)$gene_name,
function(x){paste(x, sprintf("%02d", 1:length(x)), sep="_")})[unique(rowData(se)$gene_name)])
